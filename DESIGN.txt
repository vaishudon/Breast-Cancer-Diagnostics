# Trained Model
The decision to put the data in a google sheets file and have our model directly upload it from the google server was to allow other individuals to add to the dataset and further improve the data therefore improving our model as it would automatically update with the new information.

The design for the machine learning model was based on experimenting with different data manipulation techniques and testing different models. The data was feature engineered using the Normalize and Standardize features and certain columns were ignored through a correlation test. This design was decided upon by looking at various other machine learning models with 2D data that predicted on medical-based datasets. The models that we trained the various data on were based on the kind of learning our model was doing. Since we were doing supervised learning for classification on a 2D dataset, Logistic Regression, Decision Tree Classifier, and Random forest classifier were all the best options to create a model on. The best model was chosen from the 12 different models that were trained and tested on. The best model ended up being the Logistic Regression model with a 99.4% confidence. This model was then uploaded into a pickle file and finally, used in the web-app. 

# Flask
In order to be able to display our trained model to the user in a user-friendly format, we had to use a web-framework. Although we originally intended on using an open-source framework such as Streamlit, we ended up opting for Flask instead because of the increased flexibility it provides in the realm of design. By using Flask, we were able to create our web-app using HTML.
As a result of this choice, we created an app.py file that uses Flask to serve as the connection between our trained model and HTML file. When the program is run, the app.py file launches the index.html file, providing the user with a link to the web-application. It also reads in the pickle file containing the trained model. The primary function in the app.py is predict(). The role of this function is to receive the data entered by the user in the web-app form, then transform the data into a numpy array so that it can be fed into the model. The model in the uploaded pickle file is then able to use the data to make a prediction about whether the tumor is malignant or benign. The predict() function finally returns this value so that it can be displayed to the user through the HTML file. 

# Design
The design of the user interface is implemented in the index.html file. This file contains the HTML, JavaScript, and CSS implementation. HTML was primarily used to structure the web application. For example, the layout of the input boxes for the breast cancer tumor data, the list of resources about the classification, and the breast cancer icon in the tab and title use HTML. Through CSS, we were able to make the layout elements more appealing. Specifically, changing the font (obtained from Google Fonts), colors of text, and position on the screen to be relative to the other components. In other words, if the user decides to minimize the application, the title, input boxes, and list of resources all shift to be visible in the minimized screen. In doing so, we believe our web application is more user friendly. To make our application more resourceful to our demographic- adult women- we decided to include not only resources to credible information about breast cancer, but also display relevant resources. Which is why in our JavaScript section we have a single method showResources(classification) that takes in either the string “Benign” or “Malignant” from the model and displays only the links relevant to the user based on the data they entered and its classification. 
